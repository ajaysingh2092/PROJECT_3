package in.co.rays.project_3.model;

import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Restrictions;

import in.co.rays.project_3.dto.CollegeDTO;
import in.co.rays.project_3.exception.ApplicationException;
import in.co.rays.project_3.exception.DuplicateRecordException;
import in.co.rays.project_3.util.HibDataSource;

/**
 * Hiberanate implementation of college model
 * @author ajay
 *
 */
public class CollegeModelHibImp implements CollegeModelInt{

	
	/**
	 * add new college
	 * @param dto
	 * @return dto
	 * @throws ApplicationException
	 * @throws DuplicateRecordException
	 */
	public long add(CollegeDTO dto) throws ApplicationException, DuplicateRecordException {
		
		Session session=HibDataSource.getSession();
		Transaction tx=null;
		CollegeDTO dtoExist = findByName(dto.getName());

        // Check if updated College already exist
        if (dtoExist != null && dtoExist.getId() != dto.getId()) {

            throw new DuplicateRecordException("College is already exist");
        }
        
		try{
			tx=session.beginTransaction();
			session.save(dto);
			tx.commit();
			
		}catch(HibernateException e){
			e.printStackTrace();
			// TODO: handle exception
			if (tx != null) {
				tx.rollback();
			}
			throw new ApplicationException("Exception in college Add " + e.getMessage());
		}finally{
			session.close();
		}
		
		return dto.getId();
	}

	/**
	 * delete college information
	 * @param dto
	 * @throws ApplicationException
	 */
	public void delete(CollegeDTO dto) throws ApplicationException {

		Session session=HibDataSource.getSession();
		Transaction tx=null;
		try{
			tx=session.beginTransaction();
			session.delete(dto);
			tx.commit();
		}catch (HibernateException e) {
			if (tx != null) {
				tx.rollback();
			}
			throw new ApplicationException("Exception in college Delete" + e.getMessage());
		} finally {
			session.close();
		}
	}

	/**
	 * update college detail
	 * @param dto
	 * @throws ApplicationException
	 * @throws DuplicateRecordException
	 */
	public void update(CollegeDTO dto) throws ApplicationException, DuplicateRecordException {

		Session session=null;
		Transaction tx=null;
		CollegeDTO dtoExist = findByName(dto.getName());

        // Check if updated College already exist
        if (dtoExist != null && dtoExist.getId() != dto.getId()) {

            throw new DuplicateRecordException("College is already exist");
        }
		try{
			session=HibDataSource.getSession();
			tx=session.beginTransaction();
			session.update(dto);
			tx.commit();
		}catch (HibernateException e) {
			e.printStackTrace();
			if (tx != null) {
				tx.rollback();
			}
			throw new ApplicationException("Exception in college update" + e.getMessage());
		} finally {
			session.close();
		}
	}

	
	/**
	 * find the information with the help of pk
	 * @param pk
	 * @return dto
	 * @throws ApplicationException
	 */
	public CollegeDTO findByPK(long pk) throws ApplicationException {

		Session session=HibDataSource.getSession();
		
		CollegeDTO dto=null;
		try{
			dto = (CollegeDTO) session.get(CollegeDTO.class, pk);
		}catch (HibernateException e) {

			throw new ApplicationException("Exception : Exception in getting course by pk");
		} finally {
			session.close();
		}
		System.out.println("++++"+dto);
		return dto;
	}

	/**
	 * find the infromation with the help of college name
	 * @param name
	 * @return dto
	 * @throws ApplicationException
	 */
	public CollegeDTO findByName(String name) throws ApplicationException {

		Session session=HibDataSource.getSession();
		
		CollegeDTO dto=null;
		try{
			Criteria criteria=session.createCriteria(CollegeDTO.class);
			criteria.add(Restrictions.eq("name", name));
			List list=criteria.list();
			if(list.size()==1){
				dto=(CollegeDTO)list.get(0);
			}
		}catch(HibernateException e){
			throw new ApplicationException("Exception in getting User by Name " + e.getMessage());
		}finally{
			session.close();
		}
		return dto;
	}

	public List list() throws ApplicationException {

		
		return list(0,0);
	}

	public List list(int pageNo, int pageSize) throws ApplicationException {

		Session session=HibDataSource.getSession();
		
		List list=null;
		try{
			Criteria criteria=session.createCriteria(CollegeDTO.class);
			
			if(pageSize>0){
				pageNo=(pageNo-1)*pageSize;
				criteria.setFirstResult(pageNo);
				criteria.setMaxResults(pageSize);
			}
			list=criteria.list();
		}catch(HibernateException e){
			throw new ApplicationException("Exception : Exception in College list");
		}finally{
			session.close();
		}
		
		return list;
	}

	public List search(CollegeDTO dto) throws ApplicationException {
		// TODO Auto-generated method stub
		return search(dto,0,0);
	}

	/**
	 * search college information 
	 * @param dto
	 * @param pageNo
	 * @param pageSize
	 * @return list
	 * @throws ApplicationException
	 */
	public List search(CollegeDTO dto, int pageNo, int pageSize) throws ApplicationException {

		Session session=HibDataSource.getSession();
		
		List list=null;
		try{
			Criteria criteria=session.createCriteria(CollegeDTO.class);
			if(dto!=null){
				
			if(dto.getId()>0){
				criteria.add(Restrictions.eq("id", dto.getId()));
			}
			if(dto.getName()!=null && dto.getName().length()>0){
				criteria.add(Restrictions.like("name", dto.getName()+"%"));
			}
			if(dto.getAddress()!=null&&dto.getAddress().length()>0){
				criteria.add(Restrictions.like("address", dto.getAddress()+"%"));
			}
			if(dto.getState()!=null&&dto.getState().length()>0){
				criteria.add(Restrictions.like("state", dto.getState()+"%"));
			}
			if(dto.getCity()!=null&&dto.getCity().length()>0){
				criteria.add(Restrictions.like("city", dto.getCity()+"%"));
			}
			if(pageSize>0){
				criteria.setFirstResult((pageNo-1)*pageSize);
				criteria.setMaxResults(pageSize);
				
			}
             
			}
			 list=criteria.list();
		}catch (HibernateException e) {
           e.printStackTrace();
            throw new ApplicationException("Exception in college search");
        } finally {
            session.close();
        }
		return list;
	}
	
	/*public static void main(String[] args) throws ApplicationException, DuplicateRecordException {
		
		CollegeModelHibImp m=new CollegeModelHibImp();
		CollegeDTO dto=new CollegeDTO();
		dto.setId((long) 3);
//		dto.setName("a");
//		m.add(dto);
		m.delete(dto);
		
	}*/
	
}
