package in.co.rays.project_3.model;

import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Restrictions;

import in.co.rays.project_3.dto.FacultyDTO;
import in.co.rays.project_3.exception.ApplicationException;
import in.co.rays.project_3.util.HibDataSource;

public class FacultyModelHibImp implements FacultyModelInt{


	Session session=HibDataSource.getSession();
	Transaction tx=null;
	
	public long add(FacultyDTO dto) throws ApplicationException {
		// TODO Auto-generated method stub
	try{
		tx=session.beginTransaction();
		session.save(dto);
		tx.commit();
	}catch(HibernateException e){
		if(tx!=null){
			tx.rollback();
		}
		throw new ApplicationException("Exception in faculty Add " + e.getMessage());
	}finally{
		session.close();
	}	
		
		return 0;
	}

	public void update(FacultyDTO dto) throws ApplicationException {
		// TODO Auto-generated method stub
		try{
			tx=session.beginTransaction();
			session.update(dto);
			tx.commit();
		}catch (HibernateException e) {
			e.printStackTrace();
			if (tx != null) {
				tx.rollback();
			}
			throw new ApplicationException("Exception in faculty update " + e.getMessage());
		} finally {
			session.close();
		}
	}

	public void delete(FacultyDTO dto) throws ApplicationException {
		// TODO Auto-generated method stub
	
		try{
			tx=session.beginTransaction();
			session.delete(dto);
			tx.commit();
		}catch (HibernateException e) {
			e.printStackTrace();
			if (tx != null) {
				tx.rollback();

			}
			throw new ApplicationException("Exception in faculty delete " + e.getMessage());
		} finally {
			session.close();
		}
	}

	public FacultyDTO findByPk(long pk) throws ApplicationException {
		// TODO Auto-generated method stub
		pk=0;
		FacultyDTO dto=null;
		try{
			dto=(FacultyDTO) session.get(FacultyDTO.class, pk);
		}catch (HibernateException e) {

			throw new ApplicationException("Exception : Exception in getting faculty by pk");
		} finally {
			session.close();
		}
		return null;
	}

	public FacultyDTO findByEmailId(String emailId) throws ApplicationException {
		// TODO Auto-generated method stub
		FacultyDTO dto=null;
		
		try{
			Criteria criteria=session.createCriteria(FacultyDTO.class);
			criteria.add(Restrictions.eq("emailId", emailId));
			List list= criteria.list();
			if(list.size()>0){
				dto=(FacultyDTO) list.get(0);
			}
		}catch (HibernateException e) {

			throw new ApplicationException("Exception in getting faculty by Login " + e.getMessage());

		} finally {
			session.close();
		}
		return null;
	}

	public List list() {
		// TODO Auto-generated method stub
		
		return null;
	}

	public List list(int pageNo, int pageSize) throws ApplicationException {
		// TODO Auto-generated method stub
			List list=null;
			try{
				Criteria criteria=session.createCriteria(FacultyDTO.class);
				
				if(pageSize>0){
					pageNo=(pageNo-1)*pageSize;
					criteria.setFirstResult(pageNo);
					criteria.setMaxResults(pageSize);
				}
				list=criteria.list();
			}catch (HibernateException e) {
	
				throw new ApplicationException("Exception : Exception in  faculty list");
		} finally {
			session.close();
		}

		return null;
	}

	public List search(FacultyDTO dto) {
		// TODO Auto-generated method stub
		return null;
	}

	public List search(FacultyDTO dto, int pageNo, int pageSize) {
		// TODO Auto-generated method stub
		return null;
	}

}
