package in.co.rays.project_3.model;

import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Restrictions;

import in.co.rays.project_3.dto.CourseDTO;
import in.co.rays.project_3.exception.ApplicationException;
import in.co.rays.project_3.util.HibDataSource;

public class CourseModelHibImp implements CourseModelInt{

	Session session=HibDataSource.getSession();
	Transaction tx=null;
			
	public long add(CourseDTO dto) throws ApplicationException {

		try{
			tx=session.beginTransaction();
			session.save(dto);
			tx.commit();
		}catch(HibernateException e){
			if(tx!=null){
				tx.rollback();
			}
			throw new ApplicationException("Exception in add Course"+e.getMessage());
		}finally{
			session.close();
		}
		
		return dto.getId();
	}

	public void update(CourseDTO dto) throws ApplicationException {

		try{
			tx=session.beginTransaction();
			session.update(dto);
			tx.commit();
		}catch(HibernateException e){
			if(tx!=null){
				tx.rollback();
			}
			throw new ApplicationException("Exception in update course"+e.getMessage());
		}finally{
			session.close();
		}
		
	}

	public void delete(CourseDTO dto) throws ApplicationException {

		try{
			tx=session.beginTransaction();
			session.delete(dto);
			tx.commit();
		}catch(HibernateException e){
			if(tx!=null){
				tx.rollback();
			}
			throw new ApplicationException("Exception in delete course"+e.getMessage());
		}finally{
			session.close();
		}
	}

	public CourseDTO findByPk(long pk) throws ApplicationException {

		CourseDTO dto=null;
		try{
			dto=(CourseDTO) session.get(CourseDTO.class, pk);
		}catch(HibernateException e){
			throw new ApplicationException("Exception : Exception in getting course by pk");
		}finally{
			session.close();
		}
		return dto;
	}

	public CourseDTO findByName(String name) throws ApplicationException {

		CourseDTO dto=null;
		
		try{
			Criteria criteria=session.createCriteria(CourseDTO.class);
			criteria.add(Restrictions.eq("courseName", name));
			List list=criteria.list();
			if(list.size()>0){
				dto=(CourseDTO)list.get(0);
			}
		}catch(HibernateException e){
			throw new ApplicationException("Exception : Exception in getting course by name");
		}finally{
			session.close();
		}
		
		return dto;
	}

	public List list() throws ApplicationException {

		return list(0,0);
	}

	public List list(int pageNo, int pageSize) throws ApplicationException {

		List list=null;
		CourseDTO dto=null;
		
		try{
			
			Criteria criteria=session.createCriteria(CourseDTO.class);
			if(pageSize>0){
				pageNo=(pageNo-1)*pageSize + 1;
				criteria.setFirstResult(pageNo);
				criteria.setMaxResults(pageSize);				
			}
			list=criteria.list();
		}catch (HibernateException e) {

			throw new ApplicationException("Exception : Exception in  course list");
		} finally {
			session.close();
		}

		return list;
	}

	public List search(CourseDTO dto) throws ApplicationException {
		// TODO Auto-generated method stub
		return search(dto,0,0);
	}

	public List search(CourseDTO dto, int pageNo, int pageSize) throws ApplicationException {

		List list=null;
		try{
			Criteria criteria=session.createCriteria(CourseDTO.class);
			
			if(dto!=null){
				if(dto.getId()>0){
					criteria.add(Restrictions.eq("id", dto.getId()));
				}
				if(dto.getCourseName()!=null && dto.getCourseName().length()>0){
					criteria.add(Restrictions.eq("courseName", dto.getCourseName()+"%"));
				} 
				if (dto.getDuration() != null && dto.getDuration().length() > 0) {
	                criteria.add(Restrictions.like("duration", dto.getDuration() + "%"));
	            }
	            if (dto.getDescription() != null && dto.getDescription().length() > 0) {
	                criteria.add(Restrictions.like("description", dto.getDescription() + "%"));
	            }
			}
		   if(pageSize>0){
			   pageNo=(pageNo-1)*pageSize;
			   criteria.setFirstResult(pageNo);
			   criteria.setMaxResults(pageSize);
		     }
		   list=criteria.list();
		}catch (HibernateException e) {
            
            throw new ApplicationException("Exception in course search");
        } finally {
            session.close();
        }

       
        return list;
		
	}
	
	public static void main(String[] args) throws ApplicationException {
		CourseModelHibImp c=new CourseModelHibImp();
		CourseDTO dto=  new CourseDTO();
		dto.setCourseName("science");
		c.add(dto);
	}

}
