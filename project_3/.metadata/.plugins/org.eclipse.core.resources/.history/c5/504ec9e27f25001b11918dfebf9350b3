package in.co.rays.model;

import java.util.ArrayList;
import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Restrictions;

import in.co.rays.dto.UserDTO;
import in.co.rays.exception.ApplicationException;
import in.co.rays.exception.DuplicateRecordException;
import in.co.rays.util.HibDataSource;

public class UserModelHibImp implements UserModelInt{

	Session session=HibDataSource.getSession();
	Transaction tx=null;
	
	public long add(UserDTO dto) throws ApplicationException {
		// TODO Auto-generated method stub
		
//		Session session = HibDataSource.getSession();
//		Transaction tx=null;
	try{
//		tx=session.beginTransaction();
		session.save(dto);
		dto.getId();
		tx.commit();
	}catch(HibernateException e){
		e.printStackTrace();
		// TODO: handle exception
		if (tx != null) {
			tx.rollback();
		}
		throw new ApplicationException("Exception in User Add " + e.getMessage());
	}finally{
		session.close();
	}
	
		
		return dto.getId();
	}

	public void delete(UserDTO dto) throws ApplicationException {
		// TODO Auto-generated method stub
	try{
		session.delete(dto);
		dto.getId();
		tx.commit();
	}catch(HibernateException e){
		e.printStackTrace();
		if(tx!=null){
			tx.rollback();
		}
		throw new ApplicationException("Exception in Delete User"+e.getMessage());
	}finally{
		session.close();
	}
	
		
	}

	public void update(UserDTO dto) throws ApplicationException {
		// TODO Auto-generated method stub
	try{	
		tx=session.beginTransaction();
		session.update(dto);
		tx.commit();
	}catch(HibernateException e){
		if (tx!=null){
			tx.rollback();
		}
		throw new ApplicationException("Exception in User update" + e.getMessage());
	}finally{
		session.close();
	}
		
	}

	public UserDTO findByPK(long pk) throws ApplicationException {
		// TODO Auto-generated method stub
		UserDTO dto=null;
		try {
			dto = (UserDTO) session.get(UserDTO.class, pk);

		} catch (HibernateException e) {
			throw new ApplicationException("Exception : Exception in getting User by pk");
		} finally {
			session.close();
		}

		return dto;
	}

	public UserDTO findByLogin(String login) throws ApplicationException {
		// TODO Auto-generated method stub
		
		UserDTO dto=null;
		
  try{  Criteria criteria=session.createCriteria(UserDTO.class);
		criteria.add(Restrictions.eq("login",login));
		List list=criteria.list();
		
		if (list.size() == 1) {
			dto = (UserDTO) list.get(0);
		}
	} catch (HibernateException e) {
		e.printStackTrace();
		throw new ApplicationException("Exception in getting User by Login " + e.getMessage());

	} finally {
		session.close();
	}

	return dto;
	}

	public List search(UserDTO dto) throws ApplicationException {
		// TODO Auto-generated method stub
		return search(dto,0,0);
	}

	public List search(UserDTO dto, int pageNo, int pageSize) throws ApplicationException {
		// TODO Auto-generated method stub
		System.out.println(
				"hellllo" + pageNo + "....." + pageSize + "........" + dto.getId() + "......" + dto.getRoleId());
		ArrayList<UserDTO> list = null;
		try {
			Criteria criteria = session.createCriteria(UserDTO.class);
			if (dto != null) {
				if (dto.getId() != null) {
					criteria.add(Restrictions.like("id", dto.getId()));
				}
				if (dto.getFirstName() != null && dto.getFirstName().length() > 0) {
					criteria.add(Restrictions.like("firstName", dto.getFirstName() + "%"));
				}

				if (dto.getLastName() != null && dto.getLastName().length() > 0) {
					criteria.add(Restrictions.like("lastName", dto.getLastName() + "%"));
				}
				if (dto.getLogin() != null && dto.getLogin().length() > 0) {
					criteria.add(Restrictions.like("login", dto.getLogin() + "%"));
				}
				if (dto.getPassword() != null && dto.getPassword().length() > 0) {
					criteria.add(Restrictions.like("password", dto.getPassword() + "%"));
				}
				if (dto.getGender() != null && dto.getGender().length() > 0) {
					criteria.add(Restrictions.like("gender", dto.getGender() + "%"));
				}
				if (dto.getDob() != null && dto.getDob().getDate() > 0) {
					criteria.add(Restrictions.eq("dob", dto.getDob()));
				}
				if (dto.getLastLogin() != null && dto.getLastLogin().getTime() > 0) {
					criteria.add(Restrictions.eq("lastLogin", dto.getLastLogin()));
				}
				if (dto.getRoleId() > 0) {
					criteria.add(Restrictions.eq("roleId", dto.getRoleId()));
				}
				if (dto.getUnSuccessfullLogin() > 0) {
					criteria.add(Restrictions.eq("unSuccessfulLogin", dto.getUnSuccessfullLogin()));
				}
			}
			// if pageSize is greater than 0
			if (pageSize > 0) {
				pageNo = (pageNo - 1) * pageSize;
				criteria.setFirstResult(pageNo);
				criteria.setMaxResults(pageSize);
			}
			list = (ArrayList<UserDTO>) criteria.list();
		} catch (HibernateException e) {
			throw new ApplicationException("Exception in user search");
		} finally {
			session.close();
		}

		return list;
		
	}

	public List list() throws ApplicationException {
		// TODO Auto-generated method stub
		return list(0,0);
	}

	public List list(int pageNo, int pageSize) throws ApplicationException {
		// TODO Auto-generated method stub
		List list=null;
  try{  Criteria criteria=session.createCriteria(UserDTO.class);
		if(pageSize>0){
			pageNo=(pageNo-1)*pageSize;
			criteria.setFirstResult(pageNo);
			criteria.setMaxResults(pageSize);
			
		}
		list=criteria.list();
  }catch(HibernateException e){
	  throw new ApplicationException("Exception : Exception in  Users list");
  }
  finally{
	  session.close();
  }
		
		return list;
	}

	
	public boolean changePassword(long id, String newPassword, String oldPassword) {
		// TODO Auto-generated method stub
		return false;
	}

	public UserDTO authenticate(String login, String password) {
		// TODO Auto-generated method stub
		System.out.println(login + "kkkkk" + password);
		UserDTO dto = null;
		Query q = session.createQuery("from UserDTO where login=? and password=?");
		q.setString(0, login);
		q.setString(1, password);
		List list = q.list();
		if (list.size() > 0) {
			dto = (UserDTO) list.get(0);
		} else {
			dto = null;

		}
		return dto;
	}

	public boolean forgetPassword(String login) {
		// TODO Auto-generated method stub
		return false;
	}

	public boolean resetPassword(UserDTO dto) {
		// TODO Auto-generated method stub
		return false;
	}

	public long registerUser(UserDTO dto) {
		// TODO Auto-generated method stub
		return 0;
	}

	public List getRoles(UserDTO dto) {
		// TODO Auto-generated method stub
		return null;
	}
	

}
